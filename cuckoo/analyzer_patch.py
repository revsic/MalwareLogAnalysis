import logging
import shutil
import struct
import time
from subprocess import Popen

log = logging.getLogger("analyzer")

###########################################################
# In starting binary analysis, instead of package start

shutil.copyfile(self.target, 'C:\\dbg\\sample.exe')
with open('log.txt', 'w') as creation:
    creation.write('log start')

with open(self.target, 'rb') as sample:
    s = sample.read(2)
    if s != 'MZ':
        is32bit = False
    else:
        sample.seek(60)
        s = sample.read(4)
        header_offset = struct.unpack("<L", s)[0]
        sample.seek(header_offset + 4)
        s = sample.read(2)
        machine = struct.unpack('<H', s)[0]

        is32bit = (machine == 332)

if is32bit:
    self.target = 'C:\\dbg\\Helper32.exe'
else:
    self.target = 'C:\\dbg\\Helper64.exe'

try:
    proc = Popen(self.target)
    pids = proc.pid
except Exception as e:
    log.error('custom : fail to open process %s : %s', self.target, e)

###############################################################################
# After process termination and before auxilary module termination

time.sleep(3)
with open('C:\\dbg\\log.txt') as f_log:
    raw = f_log.read()
    data = ''.join(raw.split('\x00'))
    log.debug('logged : \n%s', data)


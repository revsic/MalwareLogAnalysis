import argparse
import csv
import os

import numpy as np

from .model import MalwareDetector
from utils import Dataset, BiasedDataset


def load_csv(filename, seqlen=100):
    """Load csv file.
    Args:
        filename: str, name of the file.
        seqlen: int, length of the output sequence.
    Returns:
        (List[int], List[List[int]]), label and sequence of encoded branch data.
    """
    labels = []
    sequences = []
    with open(filename, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        for row in reader:
            label = int(row[0])
            seq = [int(idx) for idx in row[1:]]
            # zero padding
            padded = seq + [0] * (seqlen - len(seq))

            labels.append(label)
            sequences.append(padded)
    
    return labels, sequences


def load_dataset(malware_set='./data/mal_trainset.csv',
                 normal_set='./data/norm_trainset.csv',
                 testset='./data/testset.csv',
                 seqlen=100,
                 batch_size=20,
                 shuffle=False):
    """Generate dataset for training and validation.
    Args:
        malware_set: str, csv file name of the malware trainset.
        normal_set: str, csv file name of the normal software trainset.
        testset: str, csv file name of the testset.
        seqlen: int, length of the encoded branch data sequence.
        batch_size: int, size of the batch.
        shuffle: bool, whether shuffle dataset or not.
    """
    _, malware = load_csv(malware_set, seqlen)
    _, normal = load_csv(normal_set, seqlen)
    test_label, test_data = load_csv(testset, seqlen)

    # since size of the malware dataset is much larger than size of the normal dataset,
    # use biased dataset for label balance.
    trainset = BiasedDataset(malware, normal, batch_size, shuffle)
    valset = Dataset(test_data, test_label)
    return trainset, valset


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--malware_set', default='./data/mal_trainset.csv')
    parser.add_argument('--normal_set', default='./data/norm_trainset.csv')
    parser.add_argument('--testset', default='./data/testset.csv')
    parser.add_argument('--seqlen', type=int, default=100)
    parser.add_argument('--embedding_size', type=int, default=1054)
    parser.add_argument('--batch_size', type=int, default=20)
    parser.add_argument('--shuffle', action='store_true', default=False)
    parser.add_argument('--epochs', type=int, default=10)
    parser.add_argument('--ckpt_interval', type=int, default=5)
    parser.add_argument('--ckpt_dir', default='./ckpt')
    parser.add_argument('--summary_dir', default='./summary')
    parser.add_argument('--name', default='default')
    args = parser.parse_args()

    model = MalwareDetector(args.seqlen, args.embedding_size)
    
    trainset, valset = load_dataset(args.malware_set,
                                    args.normal_set,
                                    args.testset,
                                    args.seqlen,
                                    args.batch_size,
                                    args.shuffle)
    model.train(trainset,
                valset,
                args.epochs,
                args.ckpt_interval,
                args.ckpt_dir,
                args.summary_dir,
                args.name)
